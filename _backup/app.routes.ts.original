import { Routes } from '@angular/router';

// Restructured routes: nest examples under category segments so both
// top-level nav (category) and side nav (example) can reflect active state.
// Backwards compatibility redirects from old flat paths are kept at bottom.

export const appRoutes: Routes = [
  { path: '', redirectTo: 'fundamentals/minimal-form', pathMatch: 'full' },
  {
    path: 'fundamentals',
    children: [
      { path: '', redirectTo: 'minimal-form', pathMatch: 'full' },
      {
        path: 'minimal-form',
        loadComponent: () =>
          import('./01-fundamentals/minimal-form/minimal-form.component').then(
            (m) => m.MinimalFormComponent,
          ),
        title: 'Minimal Form',
      },
      {
        path: 'basic-validation',
        loadComponent: () =>
          import(
            './01-fundamentals/basic-validation/basic-validation.component'
          ).then((m) => m.BasicValidationComponent),
        title: 'Basic Validation - Foundation',
      },
      {
        path: 'field-states',
        loadComponent: () =>
          import('./01-fundamentals/field-states/field-states.component').then(
            (m) => m.FieldStatesComponent,
          ),
        title: 'Field States - Foundation',
      },
      {
        path: 'form-state-demo',
        loadComponent: () =>
          import(
            './01-fundamentals/form-state-demo/form-state-demo.component'
          ).then((m) => m.FormStateDemoComponent),
        title: 'Form State API Demo',
      },
      {
        path: 'registration-form',
        loadComponent: () =>
          import(
            './02-core-features/registration-form/registration-form.component'
          ).then((m) => m.RegistrationFormComponent),
        title: 'Registration Form',
      },
      {
        path: 'contact-form',
        loadComponent: () =>
          import('./02-core-features/contact-form/contact-form.component').then(
            (m) => m.ContactFormComponent,
          ),
        title: 'Contact Form',
      },
      {
        path: 'simple-form',
        loadComponent: () =>
          import('./02-core-features/simple-form/simple-form.component').then(
            (m) => m.SimpleFormComponent,
          ),
        title: 'Simple Form Example',
      },
    ],
  },
  {
    path: 'core',
    children: [
      { path: '', redirectTo: 'phone-numbers-form', pathMatch: 'full' },
      {
        path: 'phone-numbers-form',
        loadComponent: () =>
          import(
            './02-core-features/phone-numbers-form/phone-numbers-form.component'
          ).then((m) => m.PhoneNumbersFormComponent),
        title: 'Phone Numbers Form',
      },
      {
        path: 'profile-form',
        loadComponent: () =>
          import('./02-core-features/profile-form/profile-form.component').then(
            (m) => m.ProfileFormComponent,
          ),
        title: 'Profile Form',
      },
      {
        path: 'business-hours-form',
        loadComponent: () =>
          import(
            './02-core-features/business-hours-form/business-hours-form.component'
          ).then((m) => m.BusinessHoursFormComponent),
        title: 'Business Hours Form',
      },
      {
        path: 'survey-form',
        loadComponent: () =>
          import('./02-core-features/survey-form/survey-form.component').then(
            (m) => m.SurveyFormComponent,
          ),
        title: 'Survey Form',
      },
      {
        path: 'async-validation-form',
        loadComponent: () =>
          import(
            './02-core-features/async-validation-form/async-validation-form.component'
          ).then((m) => m.AsyncValidationFormComponent),
        title: 'Async Validation Form',
      },
      {
        path: 'root-validation-form',
        loadComponent: () =>
          import(
            './02-core-features/root-validation-form/root-validation-form.component'
          ).then((m) => m.RootValidationFormComponent),
        title: 'Root Validation Form',
      },
      {
        path: 'root-validation-live-form',
        loadComponent: () =>
          import(
            './02-core-features/root-validation-live-form/root-validation-live-form.component'
          ).then((m) => m.RootValidationLiveFormComponent),
        title: 'Root Validation (Live Mode)',
      },
    ],
  },
  {
    path: 'wrapper',
    children: [
      { path: '', redirectTo: 'control-wrapper-simple', pathMatch: 'full' },
      {
        path: 'control-wrapper-simple',
        loadComponent: () =>
          import(
            './03-control-wrapper/control-wrapper-basics/control-wrapper-basics.component'
          ).then((m) => m.ControlWrapperBasicsComponent),
        title: 'Simple (Control Wrapper)',
      },
      {
        path: 'control-wrapper-registration',
        loadComponent: () =>
          import(
            './03-control-wrapper/registration-with-wrapper/registration-with-wrapper.component'
          ).then((m) => m.RegistrationWithWrapperComponent),
        title: 'Registration (Control Wrapper)',
      },
    ],
  },
  {
    path: 'schemas',
    children: [
      { path: '', redirectTo: 'zod-schema-form', pathMatch: 'full' },
      {
        path: 'schema-form',
        loadComponent: () =>
          import(
            './04-schema-integration/schema-form/schema-form.component'
          ).then((m) => m.SchemaFormComponent),
        title: 'Schema Form (Wrapper)',
      },
      {
        path: 'zod-schema-form',
        loadComponent: () =>
          import(
            './04-schema-integration/zod-schema-form/zod-schema-form.component'
          ).then((m) => m.ZodSchemaFormComponent),
        title: 'Zod Schema Form',
      },
      {
        path: 'valibot-schema-form',
        loadComponent: () =>
          import(
            './04-schema-integration/valibot-schema-form/valibot-schema-form.component'
          ).then((m) => m.ValibotSchemaFormComponent),
        title: 'Valibot Schema Form',
      },
      {
        path: 'custom-schema-form',
        loadComponent: () =>
          import(
            './04-schema-integration/custom-schema-form/custom-schema-form.component'
          ).then((m) => m.CustomSchemaFormComponent),
        title: 'Custom Schema Form',
      },
      {
        path: 'arktype-schema-form',
        loadComponent: () =>
          import(
            './04-schema-integration/arktype-schema-form/arktype-schema-form.component'
          ).then((m) => m.ArkTypeSchemaFormComponent),
        title: 'ArkType Schema Form',
      },
      {
        path: 'migration-example',
        loadComponent: () =>
          import(
            './04-schema-integration/migration-example/migration-example.component'
          ).then((m) => m.MigrationExampleComponent),
        title: 'Migration Example',
      },
    ],
  },
  {
    path: 'smart',
    children: [
      { path: '', redirectTo: 'smart-profile-form', pathMatch: 'full' },
      {
        path: 'smart-profile-form',
        loadComponent: () =>
          import(
            './05-smart-state/smart-profile-form/smart-profile-form.component'
          ).then((m) => m.SmartProfileFormComponent),
        title: 'Smart Profile Form',
      },
      {
        path: 'basic-smart-state',
        loadComponent: () =>
          import(
            './05-smart-state/basic-smart-state/basic-smart-state.component'
          ).then((m) => m.BasicSmartStateComponent),
        title: 'Basic Smart State',
      },
      {
        path: 'realtime-sync',
        loadComponent: () =>
          import('./05-smart-state/realtime-sync/realtime-sync.component').then(
            (m) => m.RealtimeSyncComponent,
          ),
        title: 'Realtime Sync',
      },
    ],
  },
  {
    path: 'advanced',
    children: [
      { path: '', redirectTo: 'purchase-form', pathMatch: 'full' },
      {
        path: 'purchase-form',
        loadComponent: () =>
          import(
            './06-advanced-patterns/purchase-form/purchase-form.component'
          ).then((m) => m.PurchaseFormComponent),
        title: 'Purchase Form',
      },
      {
        path: 'wizard-form',
        loadComponent: () =>
          import(
            './06-advanced-patterns/wizard-form/wizard-form.component'
          ).then((m) => m.WizardFormComponent),
        title: 'Wizard Form',
      },
      {
        path: 'nested-arrays',
        loadComponent: () =>
          import(
            './06-advanced-patterns/nested-arrays/nested-arrays.component'
          ).then((m) => m.NestedArraysComponent),
        title: 'Nested Arrays',
      },
      {
        path: 'dynamic-forms',
        loadComponent: () =>
          import(
            './06-advanced-patterns/dynamic-forms/dynamic-forms.component'
          ).then((m) => m.DynamicFormsComponent),
        title: 'Dynamic Forms',
      },
      {
        path: 'custom-wrapper',
        loadComponent: () =>
          import(
            './06-advanced-patterns/custom-wrapper/custom-wrapper.component'
          ).then((m) => m.CustomWrapperComponent),
        title: 'Custom Wrapper',
      },
    ],
  },
  {
    path: '**',
    loadComponent: () =>
      import('./not-found.component').then((m) => m.NotFoundComponent),
    title: 'Not Found',
  },
];
